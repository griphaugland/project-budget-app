// SpareBank1 Budget App - Prisma Schema
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// App Models
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  emailVerified DateTime? @map("email_verified")
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // SpareBank1 Integration
  sparebank1UserId String? @unique @map("sparebank1_user_id")
  accessToken      String? @map("access_token") @db.Text
  refreshToken     String? @map("refresh_token") @db.Text
  tokenExpiresAt   DateTime? @map("token_expires_at")

  // NextAuth.js relations
  accounts         Account[]
  sessions         Session[]
  
  // App relations
  bankAccounts     BankAccount[]
  transactions     Transaction[]
  budgets          Budget[]
  categories       Category[]

  @@map("users")
}

model BankAccount {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  accountKey  String   @unique @map("account_key") // SpareBank1 account key
  accountName String   @map("account_name")
  accountType String   @map("account_type")
  balance     Decimal  @db.Decimal(12, 2)
  currency    String   @default("NOK")
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bank_accounts")
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  accountId       String   @map("account_id")
  sparebank1Id    String   @unique @map("sparebank1_id") // SpareBank1 transaction ID
  amount          Decimal  @db.Decimal(12, 2)
  currency        String   @default("NOK")
  description     String
  merchantName    String?  @map("merchant_name")
  date            DateTime
  categoryId      String?  @map("category_id")
  isRecurring     Boolean  @default(false) @map("is_recurring")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category?   @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model Category {
  id     String @id @default(cuid())
  userId String @map("user_id")
  name   String
  color  String
  icon   String?

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@unique([userId, name])
  @@map("categories")
}

model Budget {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  categoryId String   @map("category_id")
  name       String
  amount     Decimal  @db.Decimal(12, 2)
  period     String   // 'monthly', 'weekly', 'yearly'
  startDate  DateTime @map("start_date")
  endDate    DateTime? @map("end_date")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("budgets")
}
