generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id           String         @id @default(cuid())
  name         String?
  email        String?        @unique
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  accounts     accounts[]
  transactions transactions[]
  budgets      budgets[]
  monthly_budget_goals monthly_budget_goals[]

  @@map("users")
}

model accounts {
  id                String         @id @default(cuid())
  user_id           String
  iban              String
  name              String
  description       String
  balance           Decimal        @db.Decimal(15, 2)
  type              String
  owner             Json
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  synced_at         DateTime?
  accountNumber     String
  accountProperties Json
  availableBalance  Decimal        @db.Decimal(15, 2)
  currencyCode      String
  descriptionCode   String
  disposalRole      Boolean
  key               String         @unique
  productId         String
  productType       String
  user              users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions      transactions[]

  @@map("accounts")
}

model categories {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String   @default("#6B7280")
  icon        String   @default("üìù")
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("categories")
}

// Transactions table - exact SpareBank1 API structure
model transactions {
  id                     String   @id @default(cuid())
  user_id                String
  account_id             String
  
  // SpareBank1 exact fields (NO MAPPING!)
  sparebank1_id          String   @unique // SpareBank1 transaction.id
  non_unique_id          String?  @map("nonUniqueId")
  description            String?
  cleaned_description    String?  @map("cleanedDescription")
  remote_account_number  String?  @map("remoteAccountNumber")
  remote_account_name    String?  @map("remoteAccountName")
  amount                 Decimal  @db.Decimal(15, 2)
  date                   BigInt   // Unix timestamp from SpareBank1
  type_code              String   @map("typeCode")
  currency_code          String   @map("currencyCode")
  can_show_details       Boolean  @map("canShowDetails")
  source                 String   // "RECENT" | "HISTORIC"
  is_confidential        Boolean  @map("isConfidential")
  booking_status         String   @map("bookingStatus") // "PENDING" | "BOOKED"
  account_name           String   @map("accountName")
  account_key            String   @map("accountKey")
  account_currency       String   @map("accountCurrency")
  is_from_currency_account Boolean @map("isFromCurrencyAccount")
  kid_or_message         String?  @map("kidOrMessage")
  
  // JSON fields for complex data (store exactly as received)
  account_number         Json     @map("accountNumber") // {value, formatted, unformatted}
  classification_input   Json?    @map("classificationInput")
  merchant               Json?
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  synced_at  DateTime?

  // Relations  
  user    users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account accounts @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// Budget Categories - predefined spending categories
model budget_categories {
  id          String @id @default(cuid())
  name        String @unique // e.g., "Food & Dining", "Transportation", "Entertainment"
  description String?
  icon        String? // emoji or icon name
  color       String? // hex color for UI
  is_income   Boolean @default(false) // true for income categories, false for expense
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  budgets budgets[]

  @@map("budget_categories")
}

// Monthly Budgets - user's budget for each category per month
model budgets {
  id          String @id @default(cuid())
  user_id     String
  category_id String
  
  // Budget period
  month       Int    // 1-12
  year        Int    // 2024, 2025, etc.
  
  // Budget amounts
  budgeted_amount Decimal @db.Decimal(15, 2) // How much user wants to spend/earn
  spent_amount    Decimal @default(0) @db.Decimal(15, 2) // How much actually spent (calculated)
  
  // Settings
  alert_percentage Int @default(80) // Alert when 80% of budget is reached
  is_active       Boolean @default(true)
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user     users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category budget_categories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  // Ensure one budget per user per category per month
  @@unique([user_id, category_id, month, year])
  @@map("budgets")
}

// Monthly Budget Goals - overall budget target for the month
model monthly_budget_goals {
  id               String @id @default(cuid())
  user_id          String
  
  // Budget period
  month            Int    // 1-12
  year             Int    // 2024, 2025, etc.
  
  // Overall budget goal
  total_budget     Decimal @db.Decimal(15, 2) // Total monthly budget goal
  notes            String? // Optional notes about the budget
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Ensure one budget goal per user per month
  @@unique([user_id, month, year])
  @@map("monthly_budget_goals")
}
